@use "sass:math";
*,
*:before,
*:after {
  padding: 0;
  margin: 0;
  border: 0;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
:focus,
:active {
  outline: none;
}
a:focus,
a:active {
  outline: none;
}

html,
body {
  height: 100%;
  width: 100%;
  font-size: 100%;
  line-height: 1;
  font-size: 14px;
  -ms-text-size-adjust: 100%;
  -moz-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}
input,
button,
textarea {
  font-family: inherit;
}

input::-ms-clear {
  display: none;
}
button {
  cursor: pointer;
}
button::-moz-focus-inner {
  padding: 0;
  border: 0;
}
a,
a:visited {
  text-decoration: none;
}
a:hover {
  text-decoration: none;
}
img {
  vertical-align: middle;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
}

h1 {
  font-size: 40px;
  text-align: center;
  margin-bottom: 1em;
}

// Tilt effect
@mixin tiltAnimation(
  $cells-number: 10,
  $rotation-angle: 20,
  $lockAxis: "none",
  $cell-class-name: "tilt-rotation-cell",
  $content-class-name: "tilt-content"
) {
  $percentageOfHundred: calc(100% / $cells-number);
  $rotation-gradient: calc(2 * $rotation-angle) / ($cells-number - 1);
  $rotation-intersect: $rotation-angle + $rotation-gradient;

  .#{$cell-class-name} {
    position: absolute;
    z-index: 5;
    width: $percentageOfHundred;
    height: $percentageOfHundred;
  }
  @for $row from 1 to $cells-number + 1 {
    @for $column from 1 to $cells-number + 1 {
      .#{$cell-class-name}:nth-child(#{( ($row * $cells-number) + $column - $cells-number)}) {
        top: calc($row * $percentageOfHundred) - $percentageOfHundred;
        left: calc($column * $percentageOfHundred) - $percentageOfHundred;
      }
      .#{$cell-class-name}:nth-child(#{(($row *$cells-number) + $column - $cells-number)}):hover
        ~ .#{$content-class-name} {
        @if $lockAxis == "y" {
          transform: rotateY(
            (($column * $rotation-gradient) - $rotation-intersect) * 1deg
          );
        } @else if $lockAxis == "x" {
          transform: rotateX(((-$row * $rotation-gradient) + $rotation-intersect) * 1deg);
        } @else {
          transform: rotateX(((-$row * $rotation-gradient) + $rotation-intersect) * 1deg)
            rotateY((($column * $rotation-gradient) - $rotation-intersect) * 1deg);
        }
      }
    }
  }
}
.tilt-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  min-height: 100vh;
  padding: 1em;
  overflow: hidden;
}

.tilt-container {
  $speed: 100ms;
  $easing: ease;
  $perspective: 1000px;
  position: relative;
  transform-style: preserve-3d;
  perspective: $perspective;
  .tilt-content {
    transition: transform $speed $easing;
    img {
      max-width: 100%;
      max-height: 100%;
      border-radius: 30px;
    }
  }
  &.big {
    @include tiltAnimation(20, 15, false, "tilt-rotation-cell", "tilt-content");
  }
  &.small {
    @include tiltAnimation(4, 20, false, "tilt-rotation-cell", "tilt-content");
  }
}
